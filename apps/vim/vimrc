"
" ~/.vimrc
"


" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible


" Download plug.vim and put it in the "autoload" directory.
filetype off
call plug#begin()
Plug 'jlanzarotta/bufexplorer'              " Desc: BufExplorer Plugin for Vim.
Plug 'prabirshrestha/asyncomplete.vim'      " Desc: Async autocompletion for Vim 8 and Neovim with |timers|.
Plug 'prabirshrestha/asyncomplete-lsp.vim'  " Desc: Provide Language Server Protocol autocompletion source for asyncomplete.vim and vim-lsp.
Plug 'prabirshrestha/vim-lsp'               " Desc: Async Language Server Protocol plugin for vim8 and neovim.
call plug#end()


" Enable filetype detection: plugins & indenting
filetype plugin indent on


" Enable syntax highlighting
syntax on


" Display settings
set number              " line number
set title               " show file in titlebar
set ruler               " show cursor position in status bar
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set showmatch           " show matching bracket (briefly jump)
set matchtime=2         " reduces matching paren blink time from the 5[00]ms def
set wildmenu            " completion with menu
set wildmode=longest,list,full
set list
set listchars=tab:>-,trail:-
set nowrap              " don't wrap lines
set scrolloff=4         " 4 lines above/below cursor when scrolling


" Editor settings
set ignorecase          " case insensitive searching
set smartcase           " but become case sensitive if you type uppercase characters
set magic               " change the way backslashes are used in search patterns
set incsearch           " find the next match as we type the search
set hlsearch            " highlight searches by default
set autoindent          " on new lines, match indent of previous line
set copyindent          " copy the previous indentation on autoindenting
set cindent             " smart indenting for c-like code
set shiftround          " makes indenting a multiple of shiftwidth
set tabstop=2           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set softtabstop=2
set smarttab            " smart tab handling for indenting
set expandtab           " turn a tab into spaces
set backspace=eol,start,indent
set whichwrap+=<,>,h,l


" Misc settings
set visualbell          " don't beep
set noerrorbells        " don't beep
set noswapfile          " no swapfile
set nobackup            " no backup files
set hidden              " allows making buffers hidden even with unsaved changes
set autoread            " auto read when a file is changed from the outside
set autochdir           " auto change cwd to file's directory
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set foldlevelstart=99   " all folds open by default
set mouse=a             " enables the mouse in all modes
set clipboard=unnamed,unnamedplus


" With a map leader it's possible to do extra key combinations
let mapleader = ','
let g:mapleader = ','


" When editing a file, always jump to the last known cursor position.
" Don't do it when the position is invalid or when inside an event handler
" (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if line("'\"") >= 1 && line("'\"") <= line("$") |
  \   exe "normal! g`\"" |
  \ endif


" Remove trailing whitespaces
function! <SID>RemoveTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun
command! RemoveTrailingWhitespaces call <SID>RemoveTrailingWhitespaces()


" Shortcut -- window management
map <C-h>   <C-w>h
map <C-j>   <C-w>j
map <C-k>   <C-w>k
map <C-l>   <C-w>l


" Plugin -- 'jlanzarotta/bufexplorer'
map <Leader>o   :BufExplorer<CR>


" Plugin -- 'prabirshrestha/asyncomplete.vim'
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup() : "\<CR>"


" Plugin -- 'prabirshrestha/vim-lsp'
if executable('gopls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'gopls',
    \ 'cmd': {server_info->['gopls', '-remote=auto']},
    \ 'allowlist': ['go'],
    \ })
  autocmd BufWritePre *.go LspDocumentFormatSync
endif
if executable('solargraph')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'solargraph',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
    \ 'initialization_options': {"diagnostics": "true"},
    \ 'whitelist': ['ruby'],
    \ })
endif
if executable('rls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'rls',
    \ 'cmd': {server_info->['rustup', 'run', 'stable', 'rls']},
    \ 'workspace_config': {'rust': {'clippy_preference': 'on'}},
    \ 'whitelist': ['rust'],
    \ })
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gs <plug>(lsp-document-symbol-search)
  nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
  nmap <buffer> gr <plug>(lsp-references)
  nmap <buffer> gi <plug>(lsp-implementation)
  nmap <buffer> gt <plug>(lsp-type-definition)
  nmap <buffer> <leader>rn <plug>(lsp-rename)
  nmap <buffer> [g <plug>(lsp-previous-diagnostic)
  nmap <buffer> ]g <plug>(lsp-next-diagnostic)
  nmap <buffer> K <plug>(lsp-hover)
  nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
  nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

  let g:lsp_format_sync_timeout = 1000
  autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
